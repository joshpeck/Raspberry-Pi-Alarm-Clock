/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication4;

import static com.sun.org.apache.xalan.internal.lib.ExsltDatetime.date;
import java.awt.Cursor;
import java.awt.List;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.SwingConstants;
import javax.swing.Timer;

/**
 *
 * @author alexe
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        setExtendedState(JFrame.MAXIMIZED_BOTH); 
        setUndecorated(true);
        initComponents();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        clockTime = new javax.swing.JLabel();
        clockTimeOfDay = new javax.swing.JLabel();
        clockTemperature = new javax.swing.JLabel();
        clockSky = new javax.swing.JLabel();
        clockUpdated = new javax.swing.JLabel();
        clockWeather = new javax.swing.JLabel();
        clockDate = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.setPreferredSize(new java.awt.Dimension(1024, 768));

        clockTime.setFont(new java.awt.Font("Alte Haas Grotesk", 1, 300)); // NOI18N
        clockTime.setForeground(new java.awt.Color(0, 150, 0));
        clockTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clockTime.setText("5:18");

        clockTimeOfDay.setFont(new java.awt.Font("Alte Haas Grotesk", 1, 64)); // NOI18N
        clockTimeOfDay.setForeground(new java.awt.Color(0, 150, 0));
        clockTimeOfDay.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        clockTimeOfDay.setText("pm");
        clockTimeOfDay.setToolTipText("");

        clockTemperature.setFont(new java.awt.Font("Alte Haas Grotesk", 1, 64)); // NOI18N
        clockTemperature.setForeground(new java.awt.Color(0, 150, 0));
        clockTemperature.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        clockTemperature.setText("87.1 F (30.6C)");

        clockSky.setFont(new java.awt.Font("Alte Haas Grotesk", 1, 64)); // NOI18N
        clockSky.setForeground(new java.awt.Color(0, 150, 0));
        clockSky.setText("mostly clear");

        clockUpdated.setFont(new java.awt.Font("Alte Haas Grotesk", 1, 64)); // NOI18N
        clockUpdated.setForeground(new java.awt.Color(0, 150, 0));
        clockUpdated.setText("Updated 03:53");

        clockWeather.setFont(new java.awt.Font("Alte Haas Grotesk", 1, 64)); // NOI18N
        clockWeather.setForeground(new java.awt.Color(0, 150, 0));
        clockWeather.setText("heavy rain");

        clockDate.setFont(new java.awt.Font("Alte Haas Grotesk", 1, 64)); // NOI18N
        clockDate.setForeground(new java.awt.Color(0, 150, 0));
        clockDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        clockDate.setText("Jul 16");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(clockTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clockTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, 794, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clockTimeOfDay, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGap(200, 200, 200))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(clockSky, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clockWeather, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(clockUpdated, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clockDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(clockTime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clockTemperature)
                    .addComponent(clockTimeOfDay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clockSky)
                .addGap(18, 18, 18)
                .addComponent(clockWeather)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clockUpdated)
                    .addComponent(clockDate))
                .addGap(38, 38, 38))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    
    

    
    public static void main(String args[]) throws FileNotFoundException, IOException {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //checking that main is called
                System.out.println("----RUNNING JAVA PROGRAM----");
                
                //creation of frame
                new NewJFrame().setVisible(true);
                

                //creation of  ActionListener(s) for timer(s)
                ActionListener timerClockListener = new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent ae) {
                        //System.out.println("tick");
                        updateClock();
                    }
                };
                ActionListener weatherUpdateListener = new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent ae) {
                        //System.out.println("tick");
                        updateWeather();
                    }
                };
                
                //setting up timer(s) for: updating clock/weather/color
                Timer clockTimer = new Timer(1000, timerClockListener);
                clockTimer.start();
                
                Timer weatherTimer = new Timer(2*60*1000, weatherUpdateListener);
                weatherTimer.start();
                
                reactiveColor();
                updateWeather();
                
                // Transparent 16 x 16 pixel cursor image.
                BufferedImage cursorImg = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);

                // Create a new blank cursor.
                Cursor blankCursor = Toolkit.getDefaultToolkit().createCustomCursor(
                    cursorImg, new Point(0, 0), "blank cursor");

                // Set the blank cursor to the JFrame.
                jPanel1.setCursor(blankCursor);
                
            }
        });
        
        
    }
    
        public static void reactiveColor(){
        int min = 70;
        int max = 180;
        
        Random rn = new Random();
        
        int R = rn.nextInt(max - min + 1) + min;
        int G = rn.nextInt(max - min + 1) + min;
        int B = rn.nextInt(max - min + 1) + min;
        
        //System.out.println("R=" + R + ". G=" + G + ". B=" + B + ".");
        
        clockTime.setForeground(new java.awt.Color(R, G, B));
        clockSky.setForeground(new java.awt.Color(R, G, B));
        clockTemperature.setForeground(new java.awt.Color(R, G, B));
        clockWeather.setForeground(new java.awt.Color(R, G, B));
        clockUpdated.setForeground(new java.awt.Color(R, G, B));
        clockTimeOfDay.setForeground(new java.awt.Color(R, G, B));
        clockDate.setForeground(new java.awt.Color(R, G, B));
    };
    
    //File Reader for current temperature
    public static void getTemperature() {
        //reads weather.txt specified as the File object
        //declares line variable used in the while (not sure if needed?)
        String line = null;
        //File weather = new File("C:\\Users\\alexe\\Desktop\\weather.txt");
        File temperature = new File("/home/pi/AlarmClock/CurrentTemp.txt");
        
        //creating an array for the weather
        String[] temperatureInfo = new String[5];
        //variable to count the line number
        int i = 0;
        
        System.out.println("reading temperature");
        
        try {
            BufferedReader bufferedReader = new BufferedReader(new FileReader (temperature));

            while((line = bufferedReader.readLine()) != null){
                //System.out.println( "Method: " + line);
                temperatureInfo[i] = line;
                i++;

            }
            
            clockTemperature.setText(temperatureInfo[0]);
            
            bufferedReader.close();
            
        } catch (FileNotFoundException ex) {
            System.out.println("unable to read file");
            
        } catch (IOException ex){
            System.out.println("error reading file");
            
            
            
        }
    };
    
    //File Reader for last update
    public static void getUpdate() {
        //reads update.txt specified as the File object
        //declares line variable used in the while (not sure if needed?)
        String line = null;
        //File weather = new File("C:\\Users\\alexe\\Desktop\\update.txt");
        File updated = new File("/home/pi/AlarmClock/LastUpdate.txt");
        
        //creating an array for the weather
        String[] updateInfo = new String[5];
        //variable to count the line number
        int i = 0;
        
        System.out.println("reading update");
        
        try {
            BufferedReader bufferedReader = new BufferedReader(new FileReader (updated));

            while((line = bufferedReader.readLine()) != null){
                //System.out.println( "Method: " + line);
                updateInfo[i] = line;
                i++;

            }
            
            clockUpdated.setText("Updated " + updateInfo[0]);
            
            bufferedReader.close();
            
        } catch (FileNotFoundException ex) {
            System.out.println("unable to read file");
            
        } catch (IOException ex){
            System.out.println("error reading file");
            
            
            
        }
    };
    
    //File Reader for current weather
    public static void getWeather() {
        //reads weather.txt specified as the File object
        //declares line variable used in the while (not sure if needed?)
        String line = null;
        //File weather = new File("C:\\Users\\alexe\\Desktop\\weather.txt");
        File weather = new File("/home/pi/AlarmClock/CurrentWeather.txt");
        
        //creating an array for the weather
        String[] weatherInfo = new String[5];
        //variable to count the line number
        int i = 0;
        
        System.out.println("reading weather");
        
        try {
            BufferedReader bufferedReader = new BufferedReader(new FileReader (weather));

            while((line = bufferedReader.readLine()) != null){
                //System.out.println( "Method: " + line);
                weatherInfo[i] = line;
                i++;

            }
            
            clockWeather.setText(weatherInfo[0]);
            
            bufferedReader.close();
            
        } catch (FileNotFoundException ex) {
            System.out.println("unable to read file");
            
        } catch (IOException ex){
            System.out.println("error reading file");
            
            
            
        }
    };
    
    //File Reader for current Sky
    public static void getSky() {
        //reads weather.txt specified as the File object
        //declares line variable used in the while (not sure if needed?)
        String line = null;
        //File weather = new File("C:\\Users\\alexe\\Desktop\\weather.txt");
        File sky = new File("/home/pi/AlarmClock/CurrentSky.txt");
        
        //creating an array for the weather
        String[] skyInfo = new String[5];
        //variable to count the line number
        int i = 0;
        
        System.out.println("reading sky");
        
        try {
            BufferedReader bufferedReader = new BufferedReader(new FileReader (sky));

            while((line = bufferedReader.readLine()) != null){
                //System.out.println( "Method: " + line);
                skyInfo[i] = line;
                i++;

            }
            
            clockSky.setText(skyInfo[0]);
            
            bufferedReader.close();
            
        } catch (FileNotFoundException ex) {
            System.out.println("unable to read file");
            
        } catch (IOException ex){
            System.out.println("error reading file");
            
            
            
        }
    };
    
    //Updater for weather
    public static void updateWeather(){
        getWeather();
        getUpdate();
        getSky();
        getTemperature();
    };
    
    //Updater for clock
    public static void updateClock() {
        //creating a new date object
        Date dateobj = new Date();
        
        //creating AMPM and dayMonth strings
        String monthDay = new SimpleDateFormat("MMM d").format(dateobj);
        String AMPM = new SimpleDateFormat("a").format(dateobj);
        
        //setting date
        clockDate.setText(monthDay);
        
        //creating hours, minutes, and seconds integers
        int hours = Integer.parseInt(new SimpleDateFormat("HH").format(dateobj));
        int minutes = Integer.parseInt(new SimpleDateFormat("mm").format(dateobj));
        int seconds = Integer.parseInt(new SimpleDateFormat("ss").format(dateobj));

        //setting time of day accordingly
        clockTimeOfDay.setText(AMPM);
        
        //changing time from military time
        if (hours > 12){
            //System.out.println("converting from military time");
            hours -= 12;
        };
        if (hours == 0){
            hours = 12;
            reactiveColor();
        };
        
        //updating clock
        //addition of '0' to minutes
        if(minutes < 10){
            clockTime.setText(hours + ":0" + minutes);
        } else {
            clockTime.setText(hours + ":" + minutes);
        }
    };
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JLabel clockDate;
    private static javax.swing.JLabel clockSky;
    private static javax.swing.JLabel clockTemperature;
    private static javax.swing.JLabel clockTime;
    private static javax.swing.JLabel clockTimeOfDay;
    private static javax.swing.JLabel clockUpdated;
    private static javax.swing.JLabel clockWeather;
    private static javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
